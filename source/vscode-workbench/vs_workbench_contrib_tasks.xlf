<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2">
  <file original="src/vs/workbench/contrib/tasks/node/processRunnerDetector" source-language="en" datatype="plaintext"><body>
    <trans-unit id="TaskSystemDetector.noGulpTasks">
      <source xml:lang="en">Running gulp --tasks-simple didn't list any tasks. Did you run npm install?</source>
    </trans-unit>
    <trans-unit id="TaskSystemDetector.noJakeTasks">
      <source xml:lang="en">Running jake --tasks didn't list any tasks. Did you run npm install?</source>
    </trans-unit>
    <trans-unit id="TaskSystemDetector.noGulpProgram">
      <source xml:lang="en">Gulp is not installed on your system. Run npm install -g gulp to install it.</source>
    </trans-unit>
    <trans-unit id="TaskSystemDetector.noJakeProgram">
      <source xml:lang="en">Jake is not installed on your system. Run npm install -g jake to install it.</source>
    </trans-unit>
    <trans-unit id="TaskSystemDetector.noGruntProgram">
      <source xml:lang="en">Grunt is not installed on your system. Run npm install -g grunt to install it.</source>
    </trans-unit>
    <trans-unit id="TaskSystemDetector.noProgram">
      <source xml:lang="en">Program {0} was not found. Message is {1}</source>
    </trans-unit>
    <trans-unit id="TaskSystemDetector.buildTaskDetected">
      <source xml:lang="en">Build task named '{0}' detected.</source>
    </trans-unit>
    <trans-unit id="TaskSystemDetector.testTaskDetected">
      <source xml:lang="en">Test task named '{0}' detected.</source>
    </trans-unit>
  </body></file>
  <file original="src/vs/workbench/contrib/tasks/node/processTaskSystem" source-language="en" datatype="plaintext"><body>
    <trans-unit id="version1_0">
      <source xml:lang="en">The task system is configured for version 0.1.0 (see tasks.json file), which can only execute custom tasks. Upgrade to version 2.0.0 to run the task: {0}</source>
    </trans-unit>
    <trans-unit id="TaskRunnerSystem.unknownError">
      <source xml:lang="en">A unknown error has occurred while executing a task. See task output log for details.</source>
    </trans-unit>
    <trans-unit id="TaskRunnerSystem.watchingBuildTaskFinished">
      <source xml:lang="en">
Watching build tasks has finished.</source>
    </trans-unit>
    <trans-unit id="TaskRunnerSystem.childProcessError">
      <source xml:lang="en">Failed to launch external program {0} {1}.</source>
    </trans-unit>
    <trans-unit id="TaskRunnerSystem.cancelRequested">
      <source xml:lang="en">
The task '{0}' was terminated per user request.</source>
    </trans-unit>
    <trans-unit id="unknownProblemMatcher">
      <source xml:lang="en">Problem matcher {0} can't be resolved. The matcher will be ignored</source>
    </trans-unit>
  </body></file>
  <file original="src/vs/workbench/contrib/tasks/common/tasks" source-language="en" datatype="plaintext"><body>
    <trans-unit id="TaskDefinition.missingRequiredProperty">
      <source xml:lang="en">Error: the task identifier '{0}' is missing the required property '{1}'. The task identifier will be ignored.</source>
    </trans-unit>
  </body></file>
  <file original="src/vs/workbench/contrib/tasks/browser/task.contribution" source-language="en" datatype="plaintext"><body>
    <trans-unit id="tasksCategory">
      <source xml:lang="en">Tasks</source>
    </trans-unit>
    <trans-unit id="building">
      <source xml:lang="en">Building...</source>
    </trans-unit>
    <trans-unit id="numberOfRunningTasks">
      <source xml:lang="en">{0} running tasks</source>
    </trans-unit>
    <trans-unit id="runningTasks">
      <source xml:lang="en">Show Running Tasks</source>
    </trans-unit>
    <trans-unit id="status.runningTasks">
      <source xml:lang="en">Running Tasks</source>
    </trans-unit>
    <trans-unit id="miRunTask">
      <source xml:lang="en">&amp;&amp;Run Task...</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="miBuildTask">
      <source xml:lang="en">Run &amp;&amp;Build Task...</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="miRunningTask">
      <source xml:lang="en">Show Runnin&amp;&amp;g Tasks...</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="miRestartTask">
      <source xml:lang="en">R&amp;&amp;estart Running Task...</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="miTerminateTask">
      <source xml:lang="en">&amp;&amp;Terminate Task...</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="miConfigureTask">
      <source xml:lang="en">&amp;&amp;Configure Tasks...</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="miConfigureBuildTask">
      <source xml:lang="en">Configure De&amp;&amp;fault Build Task...</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="workbench.action.tasks.openWorkspaceFileTasks">
      <source xml:lang="en">Open Workspace Tasks</source>
    </trans-unit>
    <trans-unit id="ShowLogAction.label">
      <source xml:lang="en">Show Task Log</source>
    </trans-unit>
    <trans-unit id="RunTaskAction.label">
      <source xml:lang="en">Run Task</source>
    </trans-unit>
    <trans-unit id="ReRunTaskAction.label">
      <source xml:lang="en">Rerun Last Task</source>
    </trans-unit>
    <trans-unit id="RestartTaskAction.label">
      <source xml:lang="en">Restart Running Task</source>
    </trans-unit>
    <trans-unit id="ShowTasksAction.label">
      <source xml:lang="en">Show Running Tasks</source>
    </trans-unit>
    <trans-unit id="TerminateAction.label">
      <source xml:lang="en">Terminate Task</source>
    </trans-unit>
    <trans-unit id="BuildAction.label">
      <source xml:lang="en">Run Build Task</source>
    </trans-unit>
    <trans-unit id="TestAction.label">
      <source xml:lang="en">Run Test Task</source>
    </trans-unit>
    <trans-unit id="ConfigureDefaultBuildTask.label">
      <source xml:lang="en">Configure Default Build Task</source>
    </trans-unit>
    <trans-unit id="ConfigureDefaultTestTask.label">
      <source xml:lang="en">Configure Default Test Task</source>
    </trans-unit>
    <trans-unit id="workbench.action.tasks.openUserTasks">
      <source xml:lang="en">Open User Tasks</source>
    </trans-unit>
    <trans-unit id="tasksQuickAccessPlaceholder">
      <source xml:lang="en">Type the name of a task to run.</source>
    </trans-unit>
    <trans-unit id="tasksQuickAccessHelp">
      <source xml:lang="en">Run Task</source>
    </trans-unit>
    <trans-unit id="tasksConfigurationTitle">
      <source xml:lang="en">Tasks</source>
    </trans-unit>
    <trans-unit id="task.problemMatchers.neverPrompt">
      <source xml:lang="en">Configures whether to show the problem matcher prompt when running a task. Set to `true` to never prompt, or use a dictionary of task types to turn off prompting only for specific task types.</source>
    </trans-unit>
    <trans-unit id="task.problemMatchers.neverPrompt.boolean">
      <source xml:lang="en">Sets problem matcher prompting behavior for all tasks.</source>
    </trans-unit>
    <trans-unit id="task.problemMatchers.neverPrompt.array">
      <source xml:lang="en">An object containing task type-boolean pairs to never prompt for problem matchers on.</source>
    </trans-unit>
    <trans-unit id="task.autoDetect">
      <source xml:lang="en">Controls enablement of `provideTasks` for all task provider extension. If the Tasks: Run Task command is slow, disabling auto detect for task providers may help. Individual extensions may also provide settings that disable auto detection.</source>
    </trans-unit>
    <trans-unit id="task.slowProviderWarning">
      <source xml:lang="en">Configures whether a warning is shown when a provider is slow</source>
    </trans-unit>
    <trans-unit id="task.slowProviderWarning.boolean">
      <source xml:lang="en">Sets the slow provider warning for all tasks.</source>
    </trans-unit>
    <trans-unit id="task.slowProviderWarning.array">
      <source xml:lang="en">An array of task types to never show the slow provider warning.</source>
    </trans-unit>
    <trans-unit id="task.quickOpen.history">
      <source xml:lang="en">Controls the number of recent items tracked in task quick open dialog.</source>
    </trans-unit>
    <trans-unit id="task.quickOpen.detail">
      <source xml:lang="en">Controls whether to show the task detail for task that have a detail in the Run Task quick pick.</source>
    </trans-unit>
    <trans-unit id="task.quickOpen.skip">
      <source xml:lang="en">Controls whether the task quick pick is skipped when there is only one task to pick from.</source>
    </trans-unit>
    <trans-unit id="task.quickOpen.showAll">
      <source xml:lang="en">Causes the Tasks: Run Task command to use the slower "show all" behavior instead of the faster two level picker where tasks are grouped by provider.</source>
    </trans-unit>
    <trans-unit id="task.saveBeforeRun">
      <source xml:lang="en">Save all dirty editors before running a task.</source>
    </trans-unit>
    <trans-unit id="task.saveBeforeRun.always">
      <source xml:lang="en">Always saves all editors before running.</source>
    </trans-unit>
    <trans-unit id="task.saveBeforeRun.never">
      <source xml:lang="en">Never saves editors before running.</source>
    </trans-unit>
    <trans-unit id="task.SaveBeforeRun.prompt">
      <source xml:lang="en">Prompts whether to save editors before running.</source>
    </trans-unit>
  </body></file>
  <file original="src/vs/workbench/contrib/tasks/common/taskDefinitionRegistry" source-language="en" datatype="plaintext"><body>
    <trans-unit id="TaskDefinition.description">
      <source xml:lang="en">The actual task type. Please note that types starting with a '$' are reserved for internal usage.</source>
    </trans-unit>
    <trans-unit id="TaskDefinition.properties">
      <source xml:lang="en">Additional properties of the task type</source>
    </trans-unit>
    <trans-unit id="TaskDefinition.when">
      <source xml:lang="en">Condition which must be true to enable this type of task. Consider using `shellExecutionSupported`, `processExecutionSupported`, and `customExecutionSupported` as appropriate for this task definition.</source>
    </trans-unit>
    <trans-unit id="TaskTypeConfiguration.noType">
      <source xml:lang="en">The task type configuration is missing the required 'taskType' property</source>
    </trans-unit>
    <trans-unit id="TaskDefinitionExtPoint">
      <source xml:lang="en">Contributes task kinds</source>
    </trans-unit>
  </body></file>
  <file original="src/vs/workbench/contrib/tasks/common/taskConfiguration" source-language="en" datatype="plaintext"><body>
    <trans-unit id="ConfigurationParser.invalidCWD">
      <source xml:lang="en">Warning: options.cwd must be of type string. Ignoring value {0}
</source>
    </trans-unit>
    <trans-unit id="ConfigurationParser.inValidArg">
      <source xml:lang="en">Error: command argument must either be a string or a quoted string. Provided value is:
{0}</source>
    </trans-unit>
    <trans-unit id="ConfigurationParser.noShell">
      <source xml:lang="en">Warning: shell configuration is only supported when executing tasks in the terminal.</source>
    </trans-unit>
    <trans-unit id="ConfigurationParser.noName">
      <source xml:lang="en">Error: Problem Matcher in declare scope must have a name:
{0}
</source>
    </trans-unit>
    <trans-unit id="ConfigurationParser.unknownMatcherKind">
      <source xml:lang="en">Warning: the defined problem matcher is unknown. Supported types are string | ProblemMatcher | Array&lt;string | ProblemMatcher&gt;.
{0}
</source>
    </trans-unit>
    <trans-unit id="ConfigurationParser.invalidVariableReference">
      <source xml:lang="en">Error: Invalid problemMatcher reference: {0}
</source>
    </trans-unit>
    <trans-unit id="ConfigurationParser.noTaskType">
      <source xml:lang="en">Error: tasks configuration must have a type property. The configuration will be ignored.
{0}
</source>
    </trans-unit>
    <trans-unit id="ConfigurationParser.noTypeDefinition">
      <source xml:lang="en">Error: there is no registered task type '{0}'. Did you miss to install an extension that provides a corresponding task provider?</source>
    </trans-unit>
    <trans-unit id="ConfigurationParser.missingType">
      <source xml:lang="en">Error: the task configuration '{0}' is missing the required property 'type'. The task configuration will be ignored.</source>
    </trans-unit>
    <trans-unit id="ConfigurationParser.incorrectType">
      <source xml:lang="en">Error: the task configuration '{0}' is using an unknown type. The task configuration will be ignored.</source>
    </trans-unit>
    <trans-unit id="ConfigurationParser.notCustom">
      <source xml:lang="en">Error: tasks is not declared as a custom task. The configuration will be ignored.
{0}
</source>
    </trans-unit>
    <trans-unit id="ConfigurationParser.noTaskName">
      <source xml:lang="en">Error: a task must provide a label property. The task will be ignored.
{0}
</source>
    </trans-unit>
    <trans-unit id="taskConfiguration.providerUnavailable">
      <source xml:lang="en">Warning: {0} tasks are unavailable in the current environment.
</source>
    </trans-unit>
    <trans-unit id="taskConfiguration.noCommandOrDependsOn">
      <source xml:lang="en">Error: the task '{0}' neither specifies a command nor a dependsOn property. The task will be ignored. Its definition is:
{1}</source>
    </trans-unit>
    <trans-unit id="taskConfiguration.noCommand">
      <source xml:lang="en">Error: the task '{0}' doesn't define a command. The task will be ignored. Its definition is:
{1}</source>
    </trans-unit>
    <trans-unit id="TaskParse.noOsSpecificGlobalTasks">
      <source xml:lang="en">Task version 2.0.0 doesn't support global OS specific tasks. Convert them to a task with a OS specific command. Affected tasks are:
{0}</source>
      <note>"Task version 2.0.0" refers to the 2.0.0 version of the task system. The "version 2.0.0" is not localizable as it is a json key and value.</note>
    </trans-unit>
  </body></file>
  <file original="src/vs/workbench/contrib/tasks/browser/tasksQuickAccess" source-language="en" datatype="plaintext"><body>
    <trans-unit id="noTaskResults">
      <source xml:lang="en">No matching tasks</source>
    </trans-unit>
    <trans-unit id="TaskService.pickRunTask">
      <source xml:lang="en">Select the task to run</source>
    </trans-unit>
  </body></file>
  <file original="src/vs/workbench/contrib/tasks/common/jsonSchema_v1" source-language="en" datatype="plaintext"><body>
    <trans-unit id="JsonSchema.version.deprecated">
      <source xml:lang="en">Task version 0.1.0 is deprecated. Please use 2.0.0</source>
    </trans-unit>
    <trans-unit id="JsonSchema.version">
      <source xml:lang="en">The config's version number</source>
    </trans-unit>
    <trans-unit id="JsonSchema._runner">
      <source xml:lang="en">The runner has graduated. Use the offical runner property</source>
    </trans-unit>
    <trans-unit id="JsonSchema.runner">
      <source xml:lang="en">Defines whether the task is executed as a process and the output is shown in the output window or inside the terminal.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.windows">
      <source xml:lang="en">Windows specific command configuration</source>
    </trans-unit>
    <trans-unit id="JsonSchema.mac">
      <source xml:lang="en">Mac specific command configuration</source>
    </trans-unit>
    <trans-unit id="JsonSchema.linux">
      <source xml:lang="en">Linux specific command configuration</source>
    </trans-unit>
    <trans-unit id="JsonSchema.shell">
      <source xml:lang="en">Specifies whether the command is a shell command or an external program. Defaults to false if omitted.</source>
    </trans-unit>
  </body></file>
  <file original="src/vs/workbench/contrib/tasks/browser/runAutomaticTasks" source-language="en" datatype="plaintext"><body>
    <trans-unit id="tasks.run.allowAutomatic">
      <source xml:lang="en">This folder has tasks ({0}) defined in 'tasks.json' that run automatically when you open this folder. Do you allow automatic tasks to run when you open this folder?</source>
    </trans-unit>
    <trans-unit id="allow">
      <source xml:lang="en">Allow and run</source>
    </trans-unit>
    <trans-unit id="disallow">
      <source xml:lang="en">Disallow</source>
    </trans-unit>
    <trans-unit id="openTasks">
      <source xml:lang="en">Open tasks.json</source>
    </trans-unit>
    <trans-unit id="workbench.action.tasks.manageAutomaticRunning">
      <source xml:lang="en">Manage Automatic Tasks in Folder</source>
    </trans-unit>
    <trans-unit id="workbench.action.tasks.allowAutomaticTasks">
      <source xml:lang="en">Allow Automatic Tasks in Folder</source>
    </trans-unit>
    <trans-unit id="workbench.action.tasks.disallowAutomaticTasks">
      <source xml:lang="en">Disallow Automatic Tasks in Folder</source>
    </trans-unit>
  </body></file>
  <file original="src/vs/workbench/contrib/tasks/common/jsonSchema_v2" source-language="en" datatype="plaintext"><body>
    <trans-unit id="JsonSchema.shell">
      <source xml:lang="en">Specifies whether the command is a shell command or an external program. Defaults to false if omitted.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.isShellCommand.deprecated">
      <source xml:lang="en">The property isShellCommand is deprecated. Use the type property of the task and the shell property in the options instead. See also the 1.14 release notes.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.dependsOn.identifier">
      <source xml:lang="en">The task identifier.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.dependsOn.string">
      <source xml:lang="en">Another task this task depends on.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.dependsOn.array">
      <source xml:lang="en">The other tasks this task depends on.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.dependsOn">
      <source xml:lang="en">Either a string representing another task or an array of other tasks that this task depends on.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.dependsOrder.parallel">
      <source xml:lang="en">Run all dependsOn tasks in parallel.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.dependsOrder.sequence">
      <source xml:lang="en">Run all dependsOn tasks in sequence.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.dependsOrder">
      <source xml:lang="en">Determines the order of the dependsOn tasks for this task. Note that this property is not recursive.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.detail">
      <source xml:lang="en">An optional description of a task that shows in the Run Task quick pick as a detail.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.presentation">
      <source xml:lang="en">Configures the panel that is used to present the task's output and reads its input.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.presentation.echo">
      <source xml:lang="en">Controls whether the executed command is echoed to the panel. Default is true.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.presentation.focus">
      <source xml:lang="en">Controls whether the panel takes focus. Default is false. If set to true the panel is revealed as well.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.presentation.revealProblems.always">
      <source xml:lang="en">Always reveals the problems panel when this task is executed.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.presentation.revealProblems.onProblem">
      <source xml:lang="en">Only reveals the problems panel if a problem is found.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.presentation.revealProblems.never">
      <source xml:lang="en">Never reveals the problems panel when this task is executed.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.presentation.revealProblems">
      <source xml:lang="en">Controls whether the problems panel is revealed when running this task or not. Takes precedence over option "reveal". Default is "never".</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.presentation.reveal.always">
      <source xml:lang="en">Always reveals the terminal when this task is executed.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.presentation.reveal.silent">
      <source xml:lang="en">Only reveals the terminal if the task exits with an error or the problem matcher finds an error.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.presentation.reveal.never">
      <source xml:lang="en">Never reveals the terminal when this task is executed.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.presentation.reveal">
      <source xml:lang="en">Controls whether the terminal running the task is revealed or not. May be overridden by option "revealProblems". Default is "always".</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.presentation.instance">
      <source xml:lang="en">Controls if the panel is shared between tasks, dedicated to this task or a new one is created on every run.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.presentation.showReuseMessage">
      <source xml:lang="en">Controls whether to show the `Terminal will be reused by tasks, press any key to close it` message.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.presentation.clear">
      <source xml:lang="en">Controls whether the terminal is cleared before executing the task.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.presentation.group">
      <source xml:lang="en">Controls whether the task is executed in a specific terminal group using split panes.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.terminal">
      <source xml:lang="en">The terminal property is deprecated. Use presentation instead</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.group.kind">
      <source xml:lang="en">The task's execution group.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.group.isDefault">
      <source xml:lang="en">Defines if this task is the default task in the group.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.group.defaultBuild">
      <source xml:lang="en">Marks the task as the default build task.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.group.defaultTest">
      <source xml:lang="en">Marks the task as the default test task.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.group.build">
      <source xml:lang="en">Marks the task as a build task accessible through the 'Run Build Task' command.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.group.test">
      <source xml:lang="en">Marks the task as a test task accessible through the 'Run Test Task' command.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.group.none">
      <source xml:lang="en">Assigns the task to no group</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.group">
      <source xml:lang="en">Defines to which execution group this task belongs to. It supports "build" to add it to the build group and "test" to add it to the test group.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.type">
      <source xml:lang="en">Defines whether the task is run as a process or as a command inside a shell.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.commandArray">
      <source xml:lang="en">The shell command to be executed. Array items will be joined using a space character</source>
    </trans-unit>
    <trans-unit id="JsonSchema.command.quotedString.value">
      <source xml:lang="en">The actual command value</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.quoting.escape">
      <source xml:lang="en">Escapes characters using the shell's escape character (e.g. ` under PowerShell and \ under bash).</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.quoting.strong">
      <source xml:lang="en">Quotes the argument using the shell's strong quote character (e.g. " under PowerShell and bash).</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.quoting.weak">
      <source xml:lang="en">Quotes the argument using the shell's weak quote character (e.g. ' under PowerShell and bash).</source>
    </trans-unit>
    <trans-unit id="JsonSchema.command.quotesString.quote">
      <source xml:lang="en">How the command value should be quoted.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.command">
      <source xml:lang="en">The command to be executed. Can be an external program or a shell command.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.args.quotedString.value">
      <source xml:lang="en">The actual argument value</source>
    </trans-unit>
    <trans-unit id="JsonSchema.args.quotesString.quote">
      <source xml:lang="en">How the argument value should be quoted.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.args">
      <source xml:lang="en">Arguments passed to the command when this task is invoked.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.label">
      <source xml:lang="en">The task's user interface label</source>
    </trans-unit>
    <trans-unit id="JsonSchema.version">
      <source xml:lang="en">The config's version number.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.identifier">
      <source xml:lang="en">A user defined identifier to reference the task in launch.json or a dependsOn clause.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.identifier.deprecated">
      <source xml:lang="en">User defined identifiers are deprecated. For custom task use the name as a reference and for tasks provided by extensions use their defined task identifier.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.reevaluateOnRerun">
      <source xml:lang="en">Whether to reevaluate task variables on rerun.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.runOn">
      <source xml:lang="en">Configures when the task should be run. If set to folderOpen, then the task will be run automatically when the folder is opened.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.instanceLimit">
      <source xml:lang="en">The number of instances of the task that are allowed to run simultaneously.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.runOptions">
      <source xml:lang="en">The task's run related options</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.taskLabel">
      <source xml:lang="en">The task's label</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.taskName">
      <source xml:lang="en">The task's name</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.taskName.deprecated">
      <source xml:lang="en">The task's name property is deprecated. Use the label property instead.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.background">
      <source xml:lang="en">Whether the executed task is kept alive and is running in the background.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.promptOnClose">
      <source xml:lang="en">Whether the user is prompted when VS Code closes with a running task.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.matchers">
      <source xml:lang="en">The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.customizations.customizes.type">
      <source xml:lang="en">The task type to customize</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.customize.deprecated">
      <source xml:lang="en">The customize property is deprecated. See the 1.14 release notes on how to migrate to the new task customization approach</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.showOutput.deprecated">
      <source xml:lang="en">The property showOutput is deprecated. Use the reveal property inside the presentation property instead. See also the 1.14 release notes.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.echoCommand.deprecated">
      <source xml:lang="en">The property echoCommand is deprecated. Use the echo property inside the presentation property instead. See also the 1.14 release notes.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.suppressTaskName.deprecated">
      <source xml:lang="en">The property suppressTaskName is deprecated. Inline the command with its arguments into the task instead. See also the 1.14 release notes.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.isBuildCommand.deprecated">
      <source xml:lang="en">The property isBuildCommand is deprecated. Use the group property instead. See also the 1.14 release notes.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.isTestCommand.deprecated">
      <source xml:lang="en">The property isTestCommand is deprecated. Use the group property instead. See also the 1.14 release notes.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.taskSelector.deprecated">
      <source xml:lang="en">The property taskSelector is deprecated. Inline the command with its arguments into the task instead. See also the 1.14 release notes.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.windows">
      <source xml:lang="en">Windows specific command configuration</source>
    </trans-unit>
    <trans-unit id="JsonSchema.mac">
      <source xml:lang="en">Mac specific command configuration</source>
    </trans-unit>
    <trans-unit id="JsonSchema.linux">
      <source xml:lang="en">Linux specific command configuration</source>
    </trans-unit>
  </body></file>
  <file original="src/vs/workbench/contrib/tasks/common/problemMatcher" source-language="en" datatype="plaintext"><body>
    <trans-unit id="ProblemPatternParser.problemPattern.missingRegExp">
      <source xml:lang="en">The problem pattern is missing a regular expression.</source>
    </trans-unit>
    <trans-unit id="ProblemPatternParser.loopProperty.notLast">
      <source xml:lang="en">The loop property is only supported on the last line matcher.</source>
    </trans-unit>
    <trans-unit id="ProblemPatternParser.problemPattern.kindProperty.notFirst">
      <source xml:lang="en">The problem pattern is invalid. The kind property must be provided only in the first element</source>
    </trans-unit>
    <trans-unit id="ProblemPatternParser.problemPattern.missingProperty">
      <source xml:lang="en">The problem pattern is invalid. It must have at least have a file and a message.</source>
    </trans-unit>
    <trans-unit id="ProblemPatternParser.problemPattern.missingLocation">
      <source xml:lang="en">The problem pattern is invalid. It must either have kind: "file" or have a line or location match group.</source>
    </trans-unit>
    <trans-unit id="ProblemPatternParser.invalidRegexp">
      <source xml:lang="en">Error: The string {0} is not a valid regular expression.
</source>
    </trans-unit>
    <trans-unit id="ProblemPatternSchema.regexp">
      <source xml:lang="en">The regular expression to find an error, warning or info in the output.</source>
    </trans-unit>
    <trans-unit id="ProblemPatternSchema.kind">
      <source xml:lang="en">whether the pattern matches a location (file and line) or only a file.</source>
    </trans-unit>
    <trans-unit id="ProblemPatternSchema.file">
      <source xml:lang="en">The match group index of the filename. If omitted 1 is used.</source>
    </trans-unit>
    <trans-unit id="ProblemPatternSchema.location">
      <source xml:lang="en">The match group index of the problem's location. Valid location patterns are: (line), (line,column) and (startLine,startColumn,endLine,endColumn). If omitted (line,column) is assumed.</source>
    </trans-unit>
    <trans-unit id="ProblemPatternSchema.line">
      <source xml:lang="en">The match group index of the problem's line. Defaults to 2</source>
    </trans-unit>
    <trans-unit id="ProblemPatternSchema.column">
      <source xml:lang="en">The match group index of the problem's line character. Defaults to 3</source>
    </trans-unit>
    <trans-unit id="ProblemPatternSchema.endLine">
      <source xml:lang="en">The match group index of the problem's end line. Defaults to undefined</source>
    </trans-unit>
    <trans-unit id="ProblemPatternSchema.endColumn">
      <source xml:lang="en">The match group index of the problem's end line character. Defaults to undefined</source>
    </trans-unit>
    <trans-unit id="ProblemPatternSchema.severity">
      <source xml:lang="en">The match group index of the problem's severity. Defaults to undefined</source>
    </trans-unit>
    <trans-unit id="ProblemPatternSchema.code">
      <source xml:lang="en">The match group index of the problem's code. Defaults to undefined</source>
    </trans-unit>
    <trans-unit id="ProblemPatternSchema.message">
      <source xml:lang="en">The match group index of the message. If omitted it defaults to 4 if location is specified. Otherwise it defaults to 5.</source>
    </trans-unit>
    <trans-unit id="ProblemPatternSchema.loop">
      <source xml:lang="en">In a multi line matcher loop indicated whether this pattern is executed in a loop as long as it matches. Can only specified on a last pattern in a multi line pattern.</source>
    </trans-unit>
    <trans-unit id="NamedProblemPatternSchema.name">
      <source xml:lang="en">The name of the problem pattern.</source>
    </trans-unit>
    <trans-unit id="NamedMultiLineProblemPatternSchema.name">
      <source xml:lang="en">The name of the problem multi line problem pattern.</source>
    </trans-unit>
    <trans-unit id="NamedMultiLineProblemPatternSchema.patterns">
      <source xml:lang="en">The actual patterns.</source>
    </trans-unit>
    <trans-unit id="ProblemPatternExtPoint">
      <source xml:lang="en">Contributes problem patterns</source>
    </trans-unit>
    <trans-unit id="ProblemPatternRegistry.error">
      <source xml:lang="en">Invalid problem pattern. The pattern will be ignored.</source>
    </trans-unit>
    <trans-unit id="ProblemMatcherParser.noProblemMatcher">
      <source xml:lang="en">Error: the description can't be converted into a problem matcher:
{0}
</source>
    </trans-unit>
    <trans-unit id="ProblemMatcherParser.noProblemPattern">
      <source xml:lang="en">Error: the description doesn't define a valid problem pattern:
{0}
</source>
    </trans-unit>
    <trans-unit id="ProblemMatcherParser.noOwner">
      <source xml:lang="en">Error: the description doesn't define an owner:
{0}
</source>
    </trans-unit>
    <trans-unit id="ProblemMatcherParser.noFileLocation">
      <source xml:lang="en">Error: the description doesn't define a file location:
{0}
</source>
    </trans-unit>
    <trans-unit id="ProblemMatcherParser.unknownSeverity">
      <source xml:lang="en">Info: unknown severity {0}. Valid values are error, warning and info.
</source>
    </trans-unit>
    <trans-unit id="ProblemMatcherParser.noDefinedPatter">
      <source xml:lang="en">Error: the pattern with the identifier {0} doesn't exist.</source>
    </trans-unit>
    <trans-unit id="ProblemMatcherParser.noIdentifier">
      <source xml:lang="en">Error: the pattern property refers to an empty identifier.</source>
    </trans-unit>
    <trans-unit id="ProblemMatcherParser.noValidIdentifier">
      <source xml:lang="en">Error: the pattern property {0} is not a valid pattern variable name.</source>
    </trans-unit>
    <trans-unit id="ProblemMatcherParser.problemPattern.watchingMatcher">
      <source xml:lang="en">A problem matcher must define both a begin pattern and an end pattern for watching.</source>
    </trans-unit>
    <trans-unit id="ProblemMatcherParser.invalidRegexp">
      <source xml:lang="en">Error: The string {0} is not a valid regular expression.
</source>
    </trans-unit>
    <trans-unit id="WatchingPatternSchema.regexp">
      <source xml:lang="en">The regular expression to detect the begin or end of a background task.</source>
    </trans-unit>
    <trans-unit id="WatchingPatternSchema.file">
      <source xml:lang="en">The match group index of the filename. Can be omitted.</source>
    </trans-unit>
    <trans-unit id="PatternTypeSchema.name">
      <source xml:lang="en">The name of a contributed or predefined pattern</source>
    </trans-unit>
    <trans-unit id="PatternTypeSchema.description">
      <source xml:lang="en">A problem pattern or the name of a contributed or predefined problem pattern. Can be omitted if base is specified.</source>
    </trans-unit>
    <trans-unit id="ProblemMatcherSchema.base">
      <source xml:lang="en">The name of a base problem matcher to use.</source>
    </trans-unit>
    <trans-unit id="ProblemMatcherSchema.owner">
      <source xml:lang="en">The owner of the problem inside Code. Can be omitted if base is specified. Defaults to 'external' if omitted and base is not specified.</source>
    </trans-unit>
    <trans-unit id="ProblemMatcherSchema.source">
      <source xml:lang="en">A human-readable string describing the source of this diagnostic, e.g. 'typescript' or 'super lint'.</source>
    </trans-unit>
    <trans-unit id="ProblemMatcherSchema.severity">
      <source xml:lang="en">The default severity for captures problems. Is used if the pattern doesn't define a match group for severity.</source>
    </trans-unit>
    <trans-unit id="ProblemMatcherSchema.applyTo">
      <source xml:lang="en">Controls if a problem reported on a text document is applied only to open, closed or all documents.</source>
    </trans-unit>
    <trans-unit id="ProblemMatcherSchema.fileLocation">
      <source xml:lang="en">Defines how file names reported in a problem pattern should be interpreted. A relative fileLocation may be an array, where the second element of the array is the path the relative file location.</source>
    </trans-unit>
    <trans-unit id="ProblemMatcherSchema.background">
      <source xml:lang="en">Patterns to track the begin and end of a matcher active on a background task.</source>
    </trans-unit>
    <trans-unit id="ProblemMatcherSchema.background.activeOnStart">
      <source xml:lang="en">If set to true the background monitor is in active mode when the task starts. This is equals of issuing a line that matches the beginsPattern</source>
    </trans-unit>
    <trans-unit id="ProblemMatcherSchema.background.beginsPattern">
      <source xml:lang="en">If matched in the output the start of a background task is signaled.</source>
    </trans-unit>
    <trans-unit id="ProblemMatcherSchema.background.endsPattern">
      <source xml:lang="en">If matched in the output the end of a background task is signaled.</source>
    </trans-unit>
    <trans-unit id="ProblemMatcherSchema.watching.deprecated">
      <source xml:lang="en">The watching property is deprecated. Use background instead.</source>
    </trans-unit>
    <trans-unit id="ProblemMatcherSchema.watching">
      <source xml:lang="en">Patterns to track the begin and end of a watching matcher.</source>
    </trans-unit>
    <trans-unit id="ProblemMatcherSchema.watching.activeOnStart">
      <source xml:lang="en">If set to true the watcher is in active mode when the task starts. This is equals of issuing a line that matches the beginPattern</source>
    </trans-unit>
    <trans-unit id="ProblemMatcherSchema.watching.beginsPattern">
      <source xml:lang="en">If matched in the output the start of a watching task is signaled.</source>
    </trans-unit>
    <trans-unit id="ProblemMatcherSchema.watching.endsPattern">
      <source xml:lang="en">If matched in the output the end of a watching task is signaled.</source>
    </trans-unit>
    <trans-unit id="LegacyProblemMatcherSchema.watchedBegin.deprecated">
      <source xml:lang="en">This property is deprecated. Use the watching property instead.</source>
    </trans-unit>
    <trans-unit id="LegacyProblemMatcherSchema.watchedBegin">
      <source xml:lang="en">A regular expression signaling that a watched tasks begins executing triggered through file watching.</source>
    </trans-unit>
    <trans-unit id="LegacyProblemMatcherSchema.watchedEnd.deprecated">
      <source xml:lang="en">This property is deprecated. Use the watching property instead.</source>
    </trans-unit>
    <trans-unit id="LegacyProblemMatcherSchema.watchedEnd">
      <source xml:lang="en">A regular expression signaling that a watched tasks ends executing.</source>
    </trans-unit>
    <trans-unit id="NamedProblemMatcherSchema.name">
      <source xml:lang="en">The name of the problem matcher used to refer to it.</source>
    </trans-unit>
    <trans-unit id="NamedProblemMatcherSchema.label">
      <source xml:lang="en">A human readable label of the problem matcher.</source>
    </trans-unit>
    <trans-unit id="ProblemMatcherExtPoint">
      <source xml:lang="en">Contributes problem matchers</source>
    </trans-unit>
    <trans-unit id="msCompile">
      <source xml:lang="en">Microsoft compiler problems</source>
    </trans-unit>
    <trans-unit id="lessCompile">
      <source xml:lang="en">Less problems</source>
    </trans-unit>
    <trans-unit id="gulp-tsc">
      <source xml:lang="en">Gulp TSC Problems</source>
    </trans-unit>
    <trans-unit id="jshint">
      <source xml:lang="en">JSHint problems</source>
    </trans-unit>
    <trans-unit id="jshint-stylish">
      <source xml:lang="en">JSHint stylish problems</source>
    </trans-unit>
    <trans-unit id="eslint-compact">
      <source xml:lang="en">ESLint compact problems</source>
    </trans-unit>
    <trans-unit id="eslint-stylish">
      <source xml:lang="en">ESLint stylish problems</source>
    </trans-unit>
    <trans-unit id="go">
      <source xml:lang="en">Go problems</source>
    </trans-unit>
  </body></file>
  <file original="src/vs/workbench/contrib/tasks/browser/taskQuickPick" source-language="en" datatype="plaintext"><body>
    <trans-unit id="taskQuickPick.showAll">
      <source xml:lang="en">Show All Tasks...</source>
    </trans-unit>
    <trans-unit id="configureTask">
      <source xml:lang="en">Configure Task</source>
    </trans-unit>
    <trans-unit id="contributedTasks">
      <source xml:lang="en">contributed</source>
    </trans-unit>
    <trans-unit id="taskType">
      <source xml:lang="en">All {0} tasks</source>
    </trans-unit>
    <trans-unit id="recentlyUsed">
      <source xml:lang="en">recently used</source>
    </trans-unit>
    <trans-unit id="configured">
      <source xml:lang="en">configured</source>
    </trans-unit>
    <trans-unit id="TaskQuickPick.goBack">
      <source xml:lang="en">Go back ↩</source>
    </trans-unit>
    <trans-unit id="TaskQuickPick.noTasksForType">
      <source xml:lang="en">No {0} tasks found. Go back ↩</source>
    </trans-unit>
    <trans-unit id="noProviderForTask">
      <source xml:lang="en">There is no task provider registered for tasks of type "{0}".</source>
    </trans-unit>
  </body></file>
  <file original="src/vs/workbench/contrib/tasks/common/jsonSchemaCommon" source-language="en" datatype="plaintext"><body>
    <trans-unit id="JsonSchema.options">
      <source xml:lang="en">Additional command options</source>
    </trans-unit>
    <trans-unit id="JsonSchema.options.cwd">
      <source xml:lang="en">The current working directory of the executed program or script. If omitted Code's current workspace root is used.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.options.env">
      <source xml:lang="en">The environment of the executed program or shell. If omitted the parent process' environment is used.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.matcherError">
      <source xml:lang="en">Unrecognized problem matcher. Is the extension that contributes this problem matcher installed?</source>
    </trans-unit>
    <trans-unit id="JsonSchema.shellConfiguration">
      <source xml:lang="en">Configures the shell to be used.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.shell.executable">
      <source xml:lang="en">The shell to be used.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.shell.args">
      <source xml:lang="en">The shell arguments.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.command">
      <source xml:lang="en">The command to be executed. Can be an external program or a shell command.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.args">
      <source xml:lang="en">Arguments passed to the command when this task is invoked.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.taskName">
      <source xml:lang="en">The task's name</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.windows">
      <source xml:lang="en">Windows specific command configuration</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.matchers">
      <source xml:lang="en">The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.mac">
      <source xml:lang="en">Mac specific command configuration</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.linux">
      <source xml:lang="en">Linux specific command configuration</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.suppressTaskName">
      <source xml:lang="en">Controls whether the task name is added as an argument to the command. If omitted the globally defined value is used.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.showOutput">
      <source xml:lang="en">Controls whether the output of the running task is shown or not. If omitted the globally defined value is used.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.echoCommand">
      <source xml:lang="en">Controls whether the executed command is echoed to the output. Default is false.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.watching.deprecation">
      <source xml:lang="en">Deprecated. Use isBackground instead.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.watching">
      <source xml:lang="en">Whether the executed task is kept alive and is watching the file system.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.background">
      <source xml:lang="en">Whether the executed task is kept alive and is running in the background.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.promptOnClose">
      <source xml:lang="en">Whether the user is prompted when VS Code closes with a running task.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.build">
      <source xml:lang="en">Maps this task to Code's default build command.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks.test">
      <source xml:lang="en">Maps this task to Code's default test command.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.args">
      <source xml:lang="en">Additional arguments passed to the command.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.showOutput">
      <source xml:lang="en">Controls whether the output of the running task is shown or not. If omitted 'always' is used.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.watching.deprecation">
      <source xml:lang="en">Deprecated. Use isBackground instead.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.watching">
      <source xml:lang="en">Whether the executed task is kept alive and is watching the file system.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.background">
      <source xml:lang="en">Whether the executed task is kept alive and is running in the background.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.promptOnClose">
      <source xml:lang="en">Whether the user is prompted when VS Code closes with a running background task.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.suppressTaskName">
      <source xml:lang="en">Controls whether the task name is added as an argument to the command. Default is false.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.taskSelector">
      <source xml:lang="en">Prefix to indicate that an argument is task.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.matchers">
      <source xml:lang="en">The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.</source>
    </trans-unit>
    <trans-unit id="JsonSchema.tasks">
      <source xml:lang="en">The task configurations. Usually these are enrichments of task already defined in the external task runner.</source>
    </trans-unit>
  </body></file>
  <file original="src/vs/workbench/contrib/tasks/browser/abstractTaskService" source-language="en" datatype="plaintext"><body>
    <trans-unit id="ConfigureTaskRunnerAction.label">
      <source xml:lang="en">Configure Task</source>
    </trans-unit>
    <trans-unit id="tasks">
      <source xml:lang="en">Tasks</source>
    </trans-unit>
    <trans-unit id="TaskSystem.noHotSwap">
      <source xml:lang="en">Changing the task execution engine with an active task running requires to reload the Window</source>
    </trans-unit>
    <trans-unit id="reloadWindow">
      <source xml:lang="en">Reload Window</source>
    </trans-unit>
    <trans-unit id="TaskService.pickBuildTaskForLabel">
      <source xml:lang="en">Select the build task (there is no default build task defined)</source>
    </trans-unit>
    <trans-unit id="taskServiceOutputPrompt">
      <source xml:lang="en">There are task errors. See the output for details.</source>
    </trans-unit>
    <trans-unit id="showOutput">
      <source xml:lang="en">Show output</source>
    </trans-unit>
    <trans-unit id="TaskServer.folderIgnored">
      <source xml:lang="en">The folder {0} is ignored since it uses task version 0.1.0</source>
    </trans-unit>
    <trans-unit id="TaskService.providerUnavailable">
      <source xml:lang="en">Warning: {0} tasks are unavailable in the current environment.
</source>
    </trans-unit>
    <trans-unit id="TaskService.noBuildTask1">
      <source xml:lang="en">No build task defined. Mark a task with 'isBuildCommand' in the tasks.json file.</source>
    </trans-unit>
    <trans-unit id="TaskService.noBuildTask2">
      <source xml:lang="en">No build task defined. Mark a task with as a 'build' group in the tasks.json file.</source>
    </trans-unit>
    <trans-unit id="TaskService.noTestTask1">
      <source xml:lang="en">No test task defined. Mark a task with 'isTestCommand' in the tasks.json file.</source>
    </trans-unit>
    <trans-unit id="TaskService.noTestTask2">
      <source xml:lang="en">No test task defined. Mark a task with as a 'test' group in the tasks.json file.</source>
    </trans-unit>
    <trans-unit id="TaskServer.noTask">
      <source xml:lang="en">Task to execute is undefined</source>
    </trans-unit>
    <trans-unit id="TaskService.associate">
      <source xml:lang="en">associate</source>
    </trans-unit>
    <trans-unit id="TaskService.attachProblemMatcher.continueWithout">
      <source xml:lang="en">Continue without scanning the task output</source>
    </trans-unit>
    <trans-unit id="TaskService.attachProblemMatcher.never">
      <source xml:lang="en">Never scan the task output for this task</source>
    </trans-unit>
    <trans-unit id="TaskService.attachProblemMatcher.neverType">
      <source xml:lang="en">Never scan the task output for {0} tasks</source>
    </trans-unit>
    <trans-unit id="TaskService.attachProblemMatcher.learnMoreAbout">
      <source xml:lang="en">Learn more about scanning the task output</source>
    </trans-unit>
    <trans-unit id="selectProblemMatcher">
      <source xml:lang="en">Select for which kind of errors and warnings to scan the task output</source>
    </trans-unit>
    <trans-unit id="customizeParseErrors">
      <source xml:lang="en">The current task configuration has errors. Please fix the errors first before customizing a task.</source>
    </trans-unit>
    <trans-unit id="tasksJsonComment">
      <source xml:lang="en">	// See https://go.microsoft.com/fwlink/?LinkId=733558 
	// for the documentation about the tasks.json format</source>
    </trans-unit>
    <trans-unit id="moreThanOneBuildTask">
      <source xml:lang="en">There are many build tasks defined in the tasks.json. Executing the first one.
</source>
    </trans-unit>
    <trans-unit id="TaskSystem.saveBeforeRun.prompt.title">
      <source xml:lang="en">Save all editors?</source>
    </trans-unit>
    <trans-unit id="saveBeforeRun.save">
      <source xml:lang="en">Save</source>
    </trans-unit>
    <trans-unit id="saveBeforeRun.dontSave">
      <source xml:lang="en">Don't save</source>
    </trans-unit>
    <trans-unit id="detail">
      <source xml:lang="en">Do you want to save all editors before running the task?</source>
    </trans-unit>
    <trans-unit id="TaskSystem.activeSame.noBackground">
      <source xml:lang="en">The task '{0}' is already active.</source>
    </trans-unit>
    <trans-unit id="terminateTask">
      <source xml:lang="en">Terminate Task</source>
    </trans-unit>
    <trans-unit id="restartTask">
      <source xml:lang="en">Restart Task</source>
    </trans-unit>
    <trans-unit id="TaskSystem.active">
      <source xml:lang="en">There is already a task running. Terminate it first before executing another task.</source>
    </trans-unit>
    <trans-unit id="TaskSystem.restartFailed">
      <source xml:lang="en">Failed to terminate and restart task {0}</source>
    </trans-unit>
    <trans-unit id="unexpectedTaskType">
      <source xml:lang="en">The task provider for "{0}" tasks unexpectedly provided a task of type "{1}".
</source>
    </trans-unit>
    <trans-unit id="TaskService.noConfiguration">
      <source xml:lang="en">Error: The {0} task detection didn't contribute a task for the following configuration:
{1}
The task will be ignored.
</source>
    </trans-unit>
    <trans-unit id="TaskSystem.configurationErrors">
      <source xml:lang="en">Error: the provided task configuration has validation errors and can't not be used. Please correct the errors first.</source>
    </trans-unit>
    <trans-unit id="TaskSystem.invalidTaskJsonOther">
      <source xml:lang="en">Error: The content of the tasks json in {0} has syntax errors. Please correct them before executing a task.
</source>
      <note>Message notifies of an error in one of several places there is tasks related json, not necessarily in a file named tasks.json</note>
    </trans-unit>
    <trans-unit id="TasksSystem.locationWorkspaceConfig">
      <source xml:lang="en">workspace file</source>
    </trans-unit>
    <trans-unit id="TaskSystem.versionWorkspaceFile">
      <source xml:lang="en">Only tasks version 2.0.0 permitted in .codeworkspace.</source>
    </trans-unit>
    <trans-unit id="TasksSystem.locationUserConfig">
      <source xml:lang="en">user settings</source>
    </trans-unit>
    <trans-unit id="TaskSystem.versionSettings">
      <source xml:lang="en">Only tasks version 2.0.0 permitted in user settings.</source>
    </trans-unit>
    <trans-unit id="taskService.ignoreingFolder">
      <source xml:lang="en">Ignoring task configurations for workspace folder {0}. Multi folder workspace task support requires that all folders use task version 2.0.0
</source>
    </trans-unit>
    <trans-unit id="TaskSystem.invalidTaskJson">
      <source xml:lang="en">Error: The content of the tasks.json file has syntax errors. Please correct them before executing a task.
</source>
    </trans-unit>
    <trans-unit id="TaskSystem.runningTask">
      <source xml:lang="en">There is a task running. Do you want to terminate it?</source>
    </trans-unit>
    <trans-unit id="TaskSystem.terminateTask">
      <source xml:lang="en">&amp;&amp;Terminate Task</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="TaskSystem.noProcess">
      <source xml:lang="en">The launched task doesn't exist anymore. If the task spawned background processes exiting VS Code might result in orphaned processes. To avoid this start the last background process with a wait flag.</source>
    </trans-unit>
    <trans-unit id="TaskSystem.exitAnyways">
      <source xml:lang="en">&amp;&amp;Exit Anyways</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="TerminateAction.label">
      <source xml:lang="en">Terminate Task</source>
    </trans-unit>
    <trans-unit id="TaskSystem.unknownError">
      <source xml:lang="en">An error has occurred while running a task. See task log for details.</source>
    </trans-unit>
    <trans-unit id="TaskService.noWorkspace">
      <source xml:lang="en">Tasks are only available on a workspace folder.</source>
    </trans-unit>
    <trans-unit id="TaskService.learnMore">
      <source xml:lang="en">Learn More</source>
    </trans-unit>
    <trans-unit id="configureTask">
      <source xml:lang="en">Configure Task</source>
    </trans-unit>
    <trans-unit id="recentlyUsed">
      <source xml:lang="en">recently used tasks</source>
    </trans-unit>
    <trans-unit id="configured">
      <source xml:lang="en">configured tasks</source>
    </trans-unit>
    <trans-unit id="detected">
      <source xml:lang="en">detected tasks</source>
    </trans-unit>
    <trans-unit id="TaskService.ignoredFolder">
      <source xml:lang="en">The following workspace folders are ignored since they use task version 0.1.0: {0}</source>
    </trans-unit>
    <trans-unit id="TaskService.notAgain">
      <source xml:lang="en">Don't Show Again</source>
    </trans-unit>
    <trans-unit id="TaskService.pickRunTask">
      <source xml:lang="en">Select the task to run</source>
    </trans-unit>
    <trans-unit id="TaskService.noEntryToRunSlow">
      <source xml:lang="en">No task to run found. Configure Tasks...</source>
    </trans-unit>
    <trans-unit id="TaskService.noEntryToRun">
      <source xml:lang="en">No configured tasks. Configure Tasks...</source>
    </trans-unit>
    <trans-unit id="TaskService.fetchingBuildTasks">
      <source xml:lang="en">Fetching build tasks...</source>
    </trans-unit>
    <trans-unit id="TaskService.pickBuildTask">
      <source xml:lang="en">Select the build task to run</source>
    </trans-unit>
    <trans-unit id="TaskService.noBuildTask">
      <source xml:lang="en">No build task to run found. Configure Build Task...</source>
    </trans-unit>
    <trans-unit id="TaskService.fetchingTestTasks">
      <source xml:lang="en">Fetching test tasks...</source>
    </trans-unit>
    <trans-unit id="TaskService.pickTestTask">
      <source xml:lang="en">Select the test task to run</source>
    </trans-unit>
    <trans-unit id="TaskService.noTestTaskTerminal">
      <source xml:lang="en">No test task to run found. Configure Tasks...</source>
    </trans-unit>
    <trans-unit id="TaskService.taskToTerminate">
      <source xml:lang="en">Select a task to terminate</source>
    </trans-unit>
    <trans-unit id="TaskService.noTaskRunning">
      <source xml:lang="en">No task is currently running</source>
    </trans-unit>
    <trans-unit id="TaskService.terminateAllRunningTasks">
      <source xml:lang="en">All Running Tasks</source>
    </trans-unit>
    <trans-unit id="TerminateAction.noProcess">
      <source xml:lang="en">The launched process doesn't exist anymore. If the task spawned background tasks exiting VS Code might result in orphaned processes.</source>
    </trans-unit>
    <trans-unit id="TerminateAction.failed">
      <source xml:lang="en">Failed to terminate running task</source>
    </trans-unit>
    <trans-unit id="TaskService.taskToRestart">
      <source xml:lang="en">Select the task to restart</source>
    </trans-unit>
    <trans-unit id="TaskService.noTaskToRestart">
      <source xml:lang="en">No task to restart</source>
    </trans-unit>
    <trans-unit id="TaskService.template">
      <source xml:lang="en">Select a Task Template</source>
    </trans-unit>
    <trans-unit id="taskQuickPick.userSettings">
      <source xml:lang="en">User Settings</source>
    </trans-unit>
    <trans-unit id="TaskService.createJsonFile">
      <source xml:lang="en">Create tasks.json file from template</source>
    </trans-unit>
    <trans-unit id="TaskService.openJsonFile">
      <source xml:lang="en">Open tasks.json file</source>
    </trans-unit>
    <trans-unit id="TaskService.pickTask">
      <source xml:lang="en">Select a task to configure</source>
    </trans-unit>
    <trans-unit id="TaskService.defaultBuildTaskExists">
      <source xml:lang="en">{0} is already marked as the default build task</source>
    </trans-unit>
    <trans-unit id="TaskService.pickDefaultBuildTask">
      <source xml:lang="en">Select the task to be used as the default build task</source>
    </trans-unit>
    <trans-unit id="TaskService.defaultTestTaskExists">
      <source xml:lang="en">{0} is already marked as the default test task.</source>
    </trans-unit>
    <trans-unit id="TaskService.pickDefaultTestTask">
      <source xml:lang="en">Select the task to be used as the default test task</source>
    </trans-unit>
    <trans-unit id="TaskService.pickShowTask">
      <source xml:lang="en">Select the task to show its output</source>
    </trans-unit>
    <trans-unit id="TaskService.noTaskIsRunning">
      <source xml:lang="en">No task is running</source>
    </trans-unit>
  </body></file>
  <file original="src/vs/workbench/contrib/tasks/common/taskTemplates" source-language="en" datatype="plaintext"><body>
    <trans-unit id="dotnetCore">
      <source xml:lang="en">Executes .NET Core build command</source>
    </trans-unit>
    <trans-unit id="msbuild">
      <source xml:lang="en">Executes the build target</source>
    </trans-unit>
    <trans-unit id="externalCommand">
      <source xml:lang="en">Example to run an arbitrary external command</source>
    </trans-unit>
    <trans-unit id="Maven">
      <source xml:lang="en">Executes common maven commands</source>
    </trans-unit>
  </body></file>
  <file original="src/vs/workbench/contrib/tasks/browser/terminalTaskSystem" source-language="en" datatype="plaintext"><body>
    <trans-unit id="TerminalTaskSystem.unknownError">
      <source xml:lang="en">A unknown error has occurred while executing a task. See task output log for details.</source>
    </trans-unit>
    <trans-unit id="dependencyFailed">
      <source xml:lang="en">Couldn't resolve dependent task '{0}' in workspace folder '{1}'</source>
    </trans-unit>
    <trans-unit id="TerminalTaskSystem.nonWatchingMatcher">
      <source xml:lang="en">Task {0} is a background task but uses a problem matcher without a background pattern</source>
    </trans-unit>
    <trans-unit id="TerminalTaskSystem.terminalName">
      <source xml:lang="en">Task - {0}</source>
    </trans-unit>
    <trans-unit id="closeTerminal">
      <source xml:lang="en">Press any key to close the terminal.</source>
    </trans-unit>
    <trans-unit id="reuseTerminal">
      <source xml:lang="en">Terminal will be reused by tasks, press any key to close it.</source>
    </trans-unit>
    <trans-unit id="TerminalTaskSystem">
      <source xml:lang="en">Can't execute a shell command on an UNC drive using cmd.exe.</source>
    </trans-unit>
    <trans-unit id="unknownProblemMatcher">
      <source xml:lang="en">Problem matcher {0} can't be resolved. The matcher will be ignored</source>
    </trans-unit>
  </body></file>
</xliff>