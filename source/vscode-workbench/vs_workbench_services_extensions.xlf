<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2">
  <file original="src/vs/workbench/services/extensions/electron-browser/extensionService" source-language="en" datatype="plaintext">
    <body>
      <trans-unit id="extensionsDisabled">
        <source xml:lang="en">All installed extensions are temporarily disabled. Reload the window to return to the previous state.</source>
      </trans-unit>
      <trans-unit id="Reload_Duplicated1">
        <source xml:lang="en">Reload</source>
      </trans-unit>
      <trans-unit id="looping">
        <source xml:lang="en">The following extensions contain dependency loops and have been disabled: {0}</source>
      </trans-unit>
      <trans-unit id="extensionService.versionMismatchCrash">
        <source xml:lang="en">Extension host cannot start: version mismatch.</source>
      </trans-unit>
      <trans-unit id="relaunch">
        <source xml:lang="en">Relaunch VS Code</source>
      </trans-unit>
      <trans-unit id="extensionService.crash">
        <source xml:lang="en">Extension host terminated unexpectedly.</source>
      </trans-unit>
      <trans-unit id="devTools">
        <source xml:lang="en">Open Developer Tools</source>
      </trans-unit>
      <trans-unit id="restart">
        <source xml:lang="en">Restart Extension Host</source>
      </trans-unit>
      <trans-unit id="getEnvironmentFailure">
        <source xml:lang="en">Could not fetch remote environment</source>
      </trans-unit>
      <trans-unit id="enableResolver">
        <source xml:lang="en">Extension '{0}' is required to open the remote window.
OK to enable?</source>
      </trans-unit>
      <trans-unit id="enable">
        <source xml:lang="en">Enable and Reload</source>
      </trans-unit>
      <trans-unit id="installResolver">
        <source xml:lang="en">Extension '{0}' is required to open the remote window.
Do you want to install the extension?</source>
      </trans-unit>
      <trans-unit id="install_Duplicated4">
        <source xml:lang="en">Install and Reload</source>
      </trans-unit>
      <trans-unit id="resolverExtensionNotFound">
        <source xml:lang="en">`{0}` not found on marketplace</source>
      </trans-unit>
      <trans-unit id="restartExtensionHost">
        <source xml:lang="en">Restart Extension Host</source>
      </trans-unit>
      <trans-unit id="developer_Duplicated6">
        <source xml:lang="en">Developer</source>
        <note>A developer on Code itself or someone diagnosing issues in Code</note>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/services/extensions/electron-browser/remoteExtensionManagementIpc" source-language="en" datatype="plaintext">
    <body>
      <trans-unit id="incompatible">
        <source xml:lang="en">Unable to install extension '{0}' as it is not compatible with VS Code '{1}'.</source>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/services/extensions/common/remoteExtensionHost" source-language="en" datatype="plaintext">
    <body>
      <trans-unit id="remote extension host Log">
        <source xml:lang="en">Remote Extension Host</source>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/services/extensions/browser/webWorkerExtensionHost" source-language="en" datatype="plaintext">
    <body>
      <trans-unit id="name">
        <source xml:lang="en">Worker Extension Host</source>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/services/extensions/common/extensionsRegistry" source-language="en" datatype="plaintext">
    <body>
      <trans-unit id="ui">
        <source xml:lang="en">UI extension kind. In a remote window, such extensions are enabled only when available on the local machine.</source>
      </trans-unit>
      <trans-unit id="workspace">
        <source xml:lang="en">Workspace extension kind. In a remote window, such extensions are enabled only when available on the remote.</source>
      </trans-unit>
      <trans-unit id="web">
        <source xml:lang="en">Web worker extension kind. Such an extension can execute in a web worker extension host.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.engines">
        <source xml:lang="en">Engine compatibility.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.engines.vscode">
        <source xml:lang="en">For VS Code extensions, specifies the VS Code version that the extension is compatible with. Cannot be *. For example: ^0.10.5 indicates compatibility with a minimum VS Code version of 0.10.5.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.publisher">
        <source xml:lang="en">The publisher of the VS Code extension.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.displayName">
        <source xml:lang="en">The display name for the extension used in the VS Code gallery.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.categories">
        <source xml:lang="en">The categories used by the VS Code gallery to categorize the extension.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.category.languages.deprecated">
        <source xml:lang="en">Use 'Programming  Languages' instead</source>
      </trans-unit>
      <trans-unit id="vscode.extension.galleryBanner">
        <source xml:lang="en">Banner used in the VS Code marketplace.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.galleryBanner.color">
        <source xml:lang="en">The banner color on the VS Code marketplace page header.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.galleryBanner.theme">
        <source xml:lang="en">The color theme for the font used in the banner.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.contributes">
        <source xml:lang="en">All contributions of the VS Code extension represented by this package.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.preview">
        <source xml:lang="en">Sets the extension to be flagged as a Preview in the Marketplace.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.activationEvents">
        <source xml:lang="en">Activation events for the VS Code extension.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.activationEvents.onLanguage">
        <source xml:lang="en">An activation event emitted whenever a file that resolves to the specified language gets opened.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.activationEvents.onCommand">
        <source xml:lang="en">An activation event emitted whenever the specified command gets invoked.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.activationEvents.onDebug">
        <source xml:lang="en">An activation event emitted whenever a user is about to start debugging or about to setup debug configurations.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.activationEvents.onDebugInitialConfigurations">
        <source xml:lang="en">An activation event emitted whenever a "launch.json" needs to be created (and all provideDebugConfigurations methods need to be called).</source>
      </trans-unit>
      <trans-unit id="vscode.extension.activationEvents.onDebugDynamicConfigurations">
        <source xml:lang="en">An activation event emitted whenever a list of all debug configurations needs to be created (and all provideDebugConfigurations methods for the "dynamic" scope need to be called).</source>
      </trans-unit>
      <trans-unit id="vscode.extension.activationEvents.onDebugResolve">
        <source xml:lang="en">An activation event emitted whenever a debug session with the specific type is about to be launched (and a corresponding resolveDebugConfiguration method needs to be called).</source>
      </trans-unit>
      <trans-unit id="vscode.extension.activationEvents.onDebugAdapterProtocolTracker">
        <source xml:lang="en">An activation event emitted whenever a debug session with the specific type is about to be launched and a debug protocol tracker might be needed.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.activationEvents.workspaceContains">
        <source xml:lang="en">An activation event emitted whenever a folder is opened that contains at least a file matching the specified glob pattern.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.activationEvents.onStartupFinished">
        <source xml:lang="en">An activation event emitted after the start-up finished (after all `*` activated extensions have finished activating).</source>
      </trans-unit>
      <trans-unit id="vscode.extension.activationEvents.onFileSystem">
        <source xml:lang="en">An activation event emitted whenever a file or folder is accessed with the given scheme.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.activationEvents.onSearch">
        <source xml:lang="en">An activation event emitted whenever a search is started in the folder with the given scheme.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.activationEvents.onView">
        <source xml:lang="en">An activation event emitted whenever the specified view is expanded.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.activationEvents.onIdentity">
        <source xml:lang="en">An activation event emitted whenever the specified user identity.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.activationEvents.onUri">
        <source xml:lang="en">An activation event emitted whenever a system-wide Uri directed towards this extension is open.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.activationEvents.onCustomEditor">
        <source xml:lang="en">An activation event emitted whenever the specified custom editor becomes visible.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.activationEvents.star">
        <source xml:lang="en">An activation event emitted on VS Code startup. To ensure a great end user experience, please use this activation event in your extension only when no other activation events combination works in your use-case.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.badges">
        <source xml:lang="en">Array of badges to display in the sidebar of the Marketplace's extension page.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.badges.url">
        <source xml:lang="en">Badge image URL.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.badges.href">
        <source xml:lang="en">Badge link.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.badges.description">
        <source xml:lang="en">Badge description.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.markdown">
        <source xml:lang="en">Controls the Markdown rendering engine used in the Marketplace. Either github (default) or standard.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.qna">
        <source xml:lang="en">Controls the Q&amp;A link in the Marketplace. Set to marketplace to enable the default Marketplace Q &amp; A site. Set to a string to provide the URL of a custom Q &amp; A site. Set to false to disable Q &amp; A altogether.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.extensionDependencies">
        <source xml:lang="en">Dependencies to other extensions. The identifier of an extension is always ${publisher}.${name}. For example: vscode.csharp.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.contributes.extensionPack">
        <source xml:lang="en">A set of extensions that can be installed together. The identifier of an extension is always ${publisher}.${name}. For example: vscode.csharp.</source>
      </trans-unit>
      <trans-unit id="extensionKind">
        <source xml:lang="en">Define the kind of an extension. `ui` extensions are installed and run on the local machine while `workspace` extensions run on the remote.</source>
      </trans-unit>
      <trans-unit id="extensionKind.ui">
        <source xml:lang="en">Define an extension which can run only on the local machine when connected to remote window.</source>
      </trans-unit>
      <trans-unit id="extensionKind.workspace">
        <source xml:lang="en">Define an extension which can run only on the remote machine when connected remote window.</source>
      </trans-unit>
      <trans-unit id="extensionKind.ui-workspace">
        <source xml:lang="en">Define an extension which can run on either side, with a preference towards running on the local machine.</source>
      </trans-unit>
      <trans-unit id="extensionKind.workspace-ui">
        <source xml:lang="en">Define an extension which can run on either side, with a preference towards running on the remote machine.</source>
      </trans-unit>
      <trans-unit id="extensionKind.empty">
        <source xml:lang="en">Define an extension which cannot run in a remote context, neither on the local, nor on the remote machine.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.scripts.prepublish">
        <source xml:lang="en">Script executed before the package is published as a VS Code extension.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.scripts.uninstall">
        <source xml:lang="en">Uninstall hook for VS Code extension. Script that gets executed when the extension is completely uninstalled from VS Code which is when VS Code is restarted (shutdown and start) after the extension is uninstalled. Only Node scripts are supported.</source>
      </trans-unit>
      <trans-unit id="vscode.extension.icon">
        <source xml:lang="en">The path to a 128x128 pixel icon.</source>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/services/extensions/electron-browser/cachedExtensionScanner" source-language="en" datatype="plaintext">
    <body>
      <trans-unit id="overwritingExtension">
        <source xml:lang="en">Overwriting extension {0} with {1}.</source>
      </trans-unit>
      <trans-unit id="extensionUnderDevelopment">
        <source xml:lang="en">Loading development extension at {0}</source>
      </trans-unit>
      <trans-unit id="extensionCache.invalid">
        <source xml:lang="en">Extensions have been modified on disk. Please reload the window.</source>
      </trans-unit>
      <trans-unit id="reloadWindow_Duplicated8">
        <source xml:lang="en">Reload Window</source>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/services/extensions/browser/extensionUrlHandler" source-language="en" datatype="plaintext">
    <body>
      <trans-unit id="confirmUrl">
        <source xml:lang="en">Allow an extension to open this URI?</source>
      </trans-unit>
      <trans-unit id="rememberConfirmUrl">
        <source xml:lang="en">Don't ask again for this extension.</source>
      </trans-unit>
      <trans-unit id="open">
        <source xml:lang="en">&amp;&amp;Open</source>
      </trans-unit>
      <trans-unit id="reloadAndHandle">
        <source xml:lang="en">Extension '{0}' is not loaded. Would you like to reload the window to load the extension and open the URL?</source>
      </trans-unit>
      <trans-unit id="reloadAndOpen">
        <source xml:lang="en">&amp;&amp;Reload Window and Open</source>
      </trans-unit>
      <trans-unit id="enableAndHandle">
        <source xml:lang="en">Extension '{0}' is disabled. Would you like to enable the extension and reload the window to open the URL?</source>
      </trans-unit>
      <trans-unit id="enableAndReload">
        <source xml:lang="en">&amp;&amp;Enable and Open</source>
      </trans-unit>
      <trans-unit id="installAndHandle">
        <source xml:lang="en">Extension '{0}' is not installed. Would you like to install the extension and reload the window to open this URL?</source>
      </trans-unit>
      <trans-unit id="install_Duplicated5">
        <source xml:lang="en">&amp;&amp;Install</source>
      </trans-unit>
      <trans-unit id="Installing">
        <source xml:lang="en">Installing Extension '{0}'...</source>
      </trans-unit>
      <trans-unit id="reload_Duplicated2">
        <source xml:lang="en">Would you like to reload the window and open the URL '{0}'?</source>
      </trans-unit>
      <trans-unit id="Reload_Duplicated3">
        <source xml:lang="en">Reload Window and Open</source>
      </trans-unit>
      <trans-unit id="manage">
        <source xml:lang="en">Manage Authorized Extension URIs...</source>
      </trans-unit>
      <trans-unit id="extensions">
        <source xml:lang="en">Extensions</source>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/services/extensions/electron-browser/localProcessExtensionHost" source-language="en" datatype="plaintext">
    <body>
      <trans-unit id="extensionHost.startupFailDebug">
        <source xml:lang="en">Extension host did not start in 10 seconds, it might be stopped on the first line and needs a debugger to continue.</source>
      </trans-unit>
      <trans-unit id="extensionHost.startupFail">
        <source xml:lang="en">Extension host did not start in 10 seconds, that might be a problem.</source>
      </trans-unit>
      <trans-unit id="reloadWindow_Duplicated9">
        <source xml:lang="en">Reload Window</source>
      </trans-unit>
      <trans-unit id="extension host Log">
        <source xml:lang="en">Extension Host</source>
      </trans-unit>
      <trans-unit id="extensionHost.error">
        <source xml:lang="en">Error from the extension host: {0}</source>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/services/extensions/common/extensionHostManager" source-language="en" datatype="plaintext">
    <body>
      <trans-unit id="measureExtHostLatency">
        <source xml:lang="en">Measure Extension Host Latency</source>
      </trans-unit>
      <trans-unit id="developer_Duplicated7">
        <source xml:lang="en">Developer</source>
        <note>A developer on Code itself or someone diagnosing issues in Code</note>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/services/extensions/node/extensionPoints" source-language="en" datatype="plaintext">
    <body>
      <trans-unit id="jsonParseFail">
        <source xml:lang="en">Failed to parse {0}: [{1}, {2}] {3}.</source>
      </trans-unit>
      <trans-unit id="fileReadFail">
        <source xml:lang="en">Cannot read file {0}: {1}.</source>
      </trans-unit>
      <trans-unit id="jsonsParseReportErrors">
        <source xml:lang="en">Failed to parse {0}: {1}.</source>
      </trans-unit>
      <trans-unit id="jsonInvalidFormat">
        <source xml:lang="en">Invalid format {0}: JSON object expected.</source>
      </trans-unit>
      <trans-unit id="missingNLSKey">
        <source xml:lang="en">Couldn't find message for key {0}.</source>
      </trans-unit>
      <trans-unit id="notSemver">
        <source xml:lang="en">Extension version is not semver compatible.</source>
      </trans-unit>
      <trans-unit id="extensionDescription.empty">
        <source xml:lang="en">Got empty extension description</source>
      </trans-unit>
      <trans-unit id="extensionDescription.publisher">
        <source xml:lang="en">property publisher must be of type `string`.</source>
      </trans-unit>
      <trans-unit id="extensionDescription.name">
        <source xml:lang="en">property `{0}` is mandatory and must be of type `string`</source>
      </trans-unit>
      <trans-unit id="extensionDescription.version">
        <source xml:lang="en">property `{0}` is mandatory and must be of type `string`</source>
      </trans-unit>
      <trans-unit id="extensionDescription.engines">
        <source xml:lang="en">property `{0}` is mandatory and must be of type `object`</source>
      </trans-unit>
      <trans-unit id="extensionDescription.engines.vscode">
        <source xml:lang="en">property `{0}` is mandatory and must be of type `string`</source>
      </trans-unit>
      <trans-unit id="extensionDescription.extensionDependencies">
        <source xml:lang="en">property `{0}` can be omitted or must be of type `string[]`</source>
      </trans-unit>
      <trans-unit id="extensionDescription.activationEvents1">
        <source xml:lang="en">property `{0}` can be omitted or must be of type `string[]`</source>
      </trans-unit>
      <trans-unit id="extensionDescription.activationEvents2">
        <source xml:lang="en">properties `{0}` and `{1}` must both be specified or must both be omitted</source>
      </trans-unit>
      <trans-unit id="extensionDescription.main1">
        <source xml:lang="en">property `{0}` can be omitted or must be of type `string`</source>
      </trans-unit>
      <trans-unit id="extensionDescription.main2">
        <source xml:lang="en">Expected `main` ({0}) to be included inside extension's folder ({1}). This might make the extension non-portable.</source>
      </trans-unit>
      <trans-unit id="extensionDescription.main3">
        <source xml:lang="en">properties `{0}` and `{1}` must both be specified or must both be omitted</source>
      </trans-unit>
      <trans-unit id="extensionDescription.browser1">
        <source xml:lang="en">property `{0}` can be omitted or must be of type `string`</source>
      </trans-unit>
      <trans-unit id="extensionDescription.browser2">
        <source xml:lang="en">Expected `browser` ({0}) to be included inside extension's folder ({1}). This might make the extension non-portable.</source>
      </trans-unit>
      <trans-unit id="extensionDescription.browser3">
        <source xml:lang="en">properties `{0}` and `{1}` must both be specified or must both be omitted</source>
      </trans-unit>
    </body>
  </file>
</xliff>